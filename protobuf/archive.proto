syntax = "proto3";

package qubic.archiver.v2.pb;

option go_package = "github.com/qubic/go-archiver-v2-v2/protobuf/";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

message TickData {
  uint32 computor_index = 1;
  uint32 epoch = 2;
  uint32 tick_number = 3;
  uint64 timestamp = 4;
  bytes var_struct = 5;
  bytes time_lock = 6;
  repeated string transaction_ids = 7;
  repeated int64 contract_fees = 8;
  string signature_hex = 9;
}

message GetTickDataRequest {
  uint32 tick_number = 1;
}

message GetTickDataResponse {
  TickData tick_data = 1;
}

message Transaction {
  string source_id = 1;
  string dest_id = 2;
  int64 amount = 3;
  uint32 tick_number = 4;
  uint32 input_type = 5;
  uint32 input_size = 6;
  string input_hex = 7;
  string signature_hex = 8;
  string tx_id = 9;
}

message TransactionStatus {
  string tx_id = 1;
  bool moneyFlew = 2;
}

message TickTransactionsStatus {
  repeated TransactionStatus transactions = 1;
}

message QuorumTickData {
  QuorumTickStructure quorum_tick_structure = 1;
  map<uint32, QuorumDiff> quorum_diff_per_computor = 2;
}

message QuorumTickStructure {
  uint32 epoch = 2;
  uint32 tick_number = 3;
  uint64 timestamp = 4;
  string prev_resource_testing_digest_hex = 5;
  string prev_spectrum_digest_hex = 6;
  string prev_universe_digest_hex = 7;
  string prev_computer_digest_hex = 8;
  string tx_digest_hex = 9;
  string prev_transaction_body_hex = 10;
}

message QuorumDiff {
  string salted_resource_testing_digest_hex = 1;
  string salted_spectrum_digest_hex = 2;
  string salted_universe_digest_hex = 3;
  string salted_computer_digest_hex = 4;
  string expected_next_tick_tx_digest_hex = 5;
  string signature_hex = 6;
  string salted_transaction_body_hex = 7;
}

message QuorumTickDataStored {
  QuorumTickStructure quorum_tick_structure = 1;
  map<uint32, QuorumDiffStored> quorum_diff_per_computor = 2;
}

message QuorumDiffStored {
  string expected_next_tick_tx_digest_hex = 5;
  string signature_hex = 6;
}

message LastTickQuorumDataPerEpochIntervals {
  map<int32, QuorumTickData> quorum_data_per_interval = 1;
}

message GetQuorumTickDataRequest {
  uint32 tick_number = 1;
}

message GetQuorumTickDataResponse {
  QuorumTickData quorum_tick_data = 1;
}

message GetQuorumTickDataResponseStored {
  QuorumTickDataStored quorum_tick_data = 1;
}

message Computors {
  uint32 epoch = 1;
  uint32 tick_number = 2;
  repeated string identities = 3;
  string signature_hex = 4;
}

message GetComputorsRequest {
  uint32 epoch = 1;
}

message GetComputorsResponse {
  Computors computors = 1;
}

// same as the response but internally used
message ComputorsList {
  repeated Computors computors = 1;
}

message ProcessedTick {
  uint32 tick_number = 1;
  uint32 epoch = 2;
}

message GetStatusResponse {
  ProcessedTick last_processed_tick = 1;
  repeated ProcessedTickIntervalsPerEpoch processed_tick_intervals_per_epoch = 2;
}

message GetHealthResponse {
  string status = 1;
  bool up_to_date = 2;
  uint32 processed_tick = 3;
  uint32 live_epoch = 4;
  uint32 live_tick = 5;
}

message ProcessedTickInterval {
  uint32 initial_processed_tick = 1;
  uint32 last_processed_tick = 2;
}

message ProcessedTickIntervalsPerEpoch {
  uint32 epoch = 1;
  repeated ProcessedTickInterval intervals = 2;
}

message TransactionData {
  Transaction transaction = 1;
  uint64 timestamp = 2;
  bool money_flew = 3;
}

message GetLatestTickResponse {
  uint32 latest_tick = 1;
}

message GetQuorumRequestV2 {
  uint32 tick_number = 1;
}

message GetTickTransactionsRequestV2 {
  uint32 tick_number = 1;
}

message GetTickTransactionsResponseV2 {
  repeated TransactionData transactions = 1;
}

message GetTransactionRequestV2 {
  string tx_id = 1;
}
message GetTransactionResponseV2 {
  Transaction transaction = 1;
  uint64 timestamp = 2;
  bool money_flew = 3;
}

service ArchiveService {

  // Compatible with legacy v1 status but only returns last processed tick and tick intervals per epoch.
  rpc GetStatus(google.protobuf.Empty) returns (GetStatusResponse) {
    option (google.api.http) = {
      get: "/v1/status"
    };
  };

  // Get the transactions for one tick. Returns 404 if there is no data stored for the requested tick.
  rpc GetTickTransactionsV2(GetTickTransactionsRequestV2) returns (GetTickTransactionsResponseV2){
    option (google.api.http) = {
      get: "/v2/ticks/{tick_number}/transactions"
    };
  };


  // Get the tick data for one tick. Returns 404 if there is no data stored for the requested tick.
  rpc GetTickData(GetTickDataRequest) returns (GetTickDataResponse){
    option (google.api.http) = {
      get: "/v1/ticks/{tick_number}/tick-data"
    };
  };

  // Get the latest list of computors.
  rpc GetComputors(GetComputorsRequest) returns (GetComputorsResponse) {
    option (google.api.http) = {
      get: "/v1/epochs/{epoch}/computors"
    };
  };

  // Get the transaction by hash.
  rpc GetTransactionV2(GetTransactionRequestV2) returns (GetTransactionResponseV2) {
    option (google.api.http) = {
      get: "/v2/transactions/{tx_id}"
    };
  };

  // Get quorum votes for one tick.
  rpc GetTickQuorumDataV2(GetQuorumTickDataRequest) returns (GetQuorumTickDataResponse) {
    option (google.api.http) = {
      get: "/v2/ticks/{tick_number}/quorum-data"
    };
  };

  // Basic health check
  rpc GetHealth(google.protobuf.Empty) returns (GetHealthResponse) {
    option (google.api.http) = {
      get: "/v1/health"
    };
  };

}
